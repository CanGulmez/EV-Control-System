#!/usr/bin/python3

import os, sys 
import numpy as np 
# import pyqtgraph
from PySide6.QtCore import Qt, QSize
from PySide6.QtGui import QColor, QIcon
from PySide6.QtWidgets import (
   QApplication,
   QMainWindow,
   QWidget,
   QLabel,
   QHBoxLayout,
   QVBoxLayout,
   QPushButton,
   QComboBox,
   QTextEdit,
   QLineEdit,
   QSpinBox,
   QFrame
)
import subprocess

evdc_description = """
EV Control System represents the brain of vehicle. It is responsible for controlling the vehicle's subsystems like motor, battery, or so on. 
The system is designed to provide a user-friendly interface for monitoring and controlling the vehicle's performance, ensuring safety and 
efficiency. 

The EV Control System is the collection of multiple programs. Each program is responsible for controlling a specific subsystem of the vehicle.
First program group provide the system-level configurations and settings so that user will be able to see all the low-level details. Second 
program group will drive the vechicle's subsystems so that these programs are designed on top of the first group programs. Third program
group provide the modern and responsive GUIs. 

The system is modular, allowing for easy integration of additional subsystems and features and designed to be scalable, allowing for future 
upgrades and enhancements.
"""

# Absolute icon paths to insert the program
MOTOR_DRIVER_PATH             = os.path.abspath("./icons/drive.png")
BMS_PATH                      = os.path.abspath("./icons/battery-charge.png")
CHARGER_PATH                  = os.path.abspath("./icons/ui-progress-bar.png")
ADAS_PATH                     = os.path.abspath("./icons/car--plus.png")
CAMERA_PATH                   = os.path.abspath("./icons/camera-lens.png")
ABOUT_SYSTEM_PATH             = os.path.abspath("./icons/information-italic.png")
SOUND_PATH                    = os.path.abspath("./icons/balloon-sound.png")
TELEMETRY_PATH                = os.path.abspath("./icons/transmitter.png")
VENTILATION_PATH              = os.path.abspath("./icons/weather-wind.png")
ABOUT_MAINTAINER_PATH         = os.path.abspath("./icons/user-worker-boss.png")
 
class MotorDriver(QWidget):
   """ Motor Driver Subsystem for EV Control System """
   def __init__(self):
      super(MotorDriver, self).__init__()
      
      self.setWindowTitle("Motor Driver")

class Battery(QWidget):
   """ Battery Subsystem for EV Control System """
   def __init__(self):
      super(Battery, self).__init__()
      
      self.setWindowTitle("Battery")

class Charger(QWidget):
   """ Charger Subsystem for EV Control System """
   def __init__(self):
      super(Charger, self).__init__()
      
      self.setWindowTitle("Charger")

class ADAS(QWidget):
   """ ADAS Subsystem for EV Control System """
   def __init__(self):
      super(ADAS, self).__init__()
      
      self.setWindowTitle("ADAS")

class Camera(QWidget):
   """ Camera Subsystem for EV Control System """
   def __init__(self):
      super(Camera, self).__init__()
      
      self.setWindowTitle("Camera")

class Sound(QWidget):
   """ Sound Subsystem for EV Control System """
   def __init__(self):
      super(Sound, self).__init__()
      
      self.setWindowTitle("Sound")

class Telemetry(QWidget):
   """ Telemetry Subsystem for EV Control System """
   def __init__(self):
      super(Telemetry, self).__init__()
      
      self.setWindowTitle("Telemetry")

class Ventilation(QWidget):
   """ Ventilation Subsystem for EV Control System """
   def __init__(self):
      super(Ventilation, self).__init__()
      
      self.setWindowTitle("Ventilation")

class AboutSystem(QWidget):
   """ About System Subsystem for EV Control System """
   def __init__(self):
      super(AboutSystem, self).__init__()
      
      self.setWindowTitle("About System")

class AboutMaintainer(QWidget):
   """ About Maintainer Subsystem for EV Control System """
   def __init__(self):
      super(AboutMaintainer, self).__init__()
      
      self.setWindowTitle("About Maintainer")


class EVControlSystem(QMainWindow):
   """ Eletrical Vehicle Control System """
   def __init__(self):
      super(EVControlSystem, self).__init__()
      
      self.setWindowTitle("EV Control System")
      self.showMaximized()
      self.setStyleSheet("""
         QPushButton {
            border-radius: 20px;
            background-color: rgb(26, 95, 180);
         }
         QFrame {
            color: rgb(26, 95, 180);
         }
         QLabel {
            color: rgb(255, 255, 255);
         }""")
      
      # Page layouts
      self.pageLayout = QVBoxLayout()
      self.upperButtonLayout = QHBoxLayout()
      self.lowerButtonLayout = QHBoxLayout()
      self.buttonsLayout = QVBoxLayout()
      
      # Upper seperator frame
      self.upperSeperatorLine = QFrame()
      self.upperSeperatorLine.setFrameShape(QFrame.HLine)
      self.upperSeperatorLine.setLineWidth(3)
      self.pageLayout.addWidget(self.upperSeperatorLine)
      
      # Header label
      self.headerLabel = QLabel("EV Control System")
      font = self.headerLabel.font()
      font.setBold(True)
      font.setPointSize(28)
      self.headerLabel.setFont(font)
      self.pageLayout.addWidget(self.headerLabel, alignment=Qt.AlignmentFlag.AlignCenter)
      
      # Version label
      self.versionLabel = QLabel("v1.0.0")
      font = self.versionLabel.font()
      font.setPointSize(13)
      self.versionLabel.setFont(font)
      self.pageLayout.addWidget(self.versionLabel, alignment=Qt.AlignmentFlag.AlignCenter)
      
      # Lower seperator frame
      self.lowerSeperatorLine = QFrame()
      self.lowerSeperatorLine.setFrameShape(QFrame.HLine)
      self.lowerSeperatorLine.setLineWidth(3)
      self.pageLayout.addWidget(self.lowerSeperatorLine)
      
      # EVCS description
      self.descriptionLabel = QLabel(evdc_description)
      font = self.descriptionLabel.font()
      font.setPointSize(13)
      self.descriptionLabel.setFont(font)
      self.pageLayout.addWidget(self.descriptionLabel, alignment=Qt.AlignmentFlag.AlignLeft)
      
      # Page stretch
      self.pageLayout.addStretch()
      
      # Upper buttons
      self.upperButtons = [
         QPushButton(QIcon(MOTOR_DRIVER_PATH), " Motor Driver"),
         QPushButton(QIcon(BMS_PATH), " Battery"),
         QPushButton(QIcon(CHARGER_PATH), " Charger"), 
         QPushButton(QIcon(ADAS_PATH), " ADAS"), 
         QPushButton(QIcon(CAMERA_PATH), " Camera")
      ]
      for upperButton in self.upperButtons:
         upperButton.setFixedHeight(60)
         font = upperButton.font()
         font.setPointSize(13)
         upperButton.setFont(font)
         self.upperButtonLayout.addWidget(upperButton)
      self.pageLayout.addLayout(self.upperButtonLayout)
      
      self.upperButtons[0].clicked.connect(self.motorDriverWindow)
      self.upperButtons[1].clicked.connect(self.batteryWindow)
      self.upperButtons[2].clicked.connect(self.chargerWindow)
      self.upperButtons[3].clicked.connect(self.ADASWindow)
      self.upperButtons[4].clicked.connect(self.cameraWindow)
      
      # Lower buttons
      self.lowerButtons = [
         QPushButton(QIcon(SOUND_PATH), " Sound"),
         QPushButton(QIcon(TELEMETRY_PATH), " Telemetry"),
         QPushButton(QIcon(VENTILATION_PATH), "  Ventilation"), 
         QPushButton(QIcon(ABOUT_MAINTAINER_PATH), " About Maintainer"), 
         QPushButton(QIcon(ABOUT_SYSTEM_PATH), " About System")
      ]
      for lowerButton in self.lowerButtons:
         lowerButton.setFixedHeight(60)
         font = lowerButton.font()
         font.setPointSize(13)
         lowerButton.setFont(font)
         self.lowerButtonLayout.addWidget(lowerButton)
      self.pageLayout.addLayout(self.lowerButtonLayout)
      
      self.lowerButtons[0].clicked.connect(self.soundWindow)
      self.lowerButtons[1].clicked.connect(self.telemetryWindow)
      self.lowerButtons[2].clicked.connect(self.ventilationWindow)
      self.lowerButtons[3].clicked.connect(self.aboutMaintainerWindow)
      self.lowerButtons[4].clicked.connect(self.aboutSystemWindow)
      
      # Copyright symbol.
      self.copyrightLabel = QLabel("\n\u00A9 All Rights Reserved")
      font = self.copyrightLabel.font()
      font.setPointSize(10)
      self.copyrightLabel.setFont(font)
      self.pageLayout.addWidget(self.copyrightLabel, alignment=Qt.AlignmentFlag.AlignCenter)

      # Container widget 
      self.containerWidget = QWidget()
      self.pageLayout.setContentsMargins(150, 20, 150, 20)
      self.containerWidget.setLayout(self.pageLayout)
      self.setCentralWidget(self.containerWidget)
      
   def motorDriverWindow(self):
      """ Motor Driver Window """
      self.motorDriver = MotorDriver()
      self.motorDriver.show()
   
   def batteryWindow(self):
      """ Battery Window """
      self.battery = Battery()
      self.battery.show()
   
   def chargerWindow(self):
      """ Charger Window """
      self.charger = Charger()
      self.charger.show()
   
   def ADASWindow(self):
      """ ADAS Window """
      self.adas = ADAS()
      self.adas.show()
   
   def cameraWindow(self):
      """ Camera Window """
      self.camera = Camera()
      self.camera.show()
      
   def soundWindow(self):
      """ Sound Window """
      self.sound = Sound()
      self.sound.show()
   
   def telemetryWindow(self):
      """ Telemetry Window """
      self.telemetry = Telemetry()
      self.telemetry.show()
   
   def ventilationWindow(self):
      """ Ventilation Window """
      self.ventilation = Ventilation()
      self.ventilation.show()

   def aboutMaintainerWindow(self):
      """ About Maintainer Window """
      self.aboutMaintainer = AboutMaintainer()
      self.aboutMaintainer.show()
   
   def aboutSystemWindow(self):
      """ About System Window """
      self.aboutSystem = AboutSystem()
      self.aboutSystem.show()
   
      
if __name__ == "__main__":
   app = QApplication(sys.argv)
   
   evcs = EVControlSystem()
   evcs.show()
   
   app.exec()
